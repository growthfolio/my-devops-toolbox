# docker-compose.yml
version: '3.8'

#==============================================================================
# GitLab CE - Docker Compose para Desenvolvimento/Testes
# VersÃ£o: 2.0
# Requisitos: Docker 20.10+, Docker Compose 2.0+, 8GB RAM, 50GB storage
#==============================================================================

networks:
  gitlab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  gitlab-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/gitlab/config
  gitlab-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/gitlab/logs
  gitlab-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/gitlab/data
  gitlab-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/gitlab/backups
  redis-data:
    driver: local
  postgres-data:
    driver: local

services:
  # PostgreSQL Database
  gitlab-postgresql:
    image: postgres:14-alpine
    container_name: gitlab-postgres
    restart: unless-stopped
    hostname: postgres.gitlab.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      gitlab-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  gitlab-redis:
    image: redis:7-alpine
    container_name: gitlab-redis
    restart: unless-stopped
    hostname: redis.gitlab.local
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      gitlab-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # GitLab CE Main Service
  gitlab:
    image: gitlab/gitlab-ce:${GITLAB_VERSION:-latest}
    container_name: gitlab-ce
    restart: unless-stopped
    hostname: ${GITLAB_HOSTNAME}
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # External URL
        external_url '${GITLAB_EXTERNAL_URL}'
        
        # PostgreSQL Configuration
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['db_host'] = 'gitlab-postgresql'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_database'] = '${POSTGRES_DB}'
        gitlab_rails['db_username'] = '${POSTGRES_USER}'
        gitlab_rails['db_password'] = '${POSTGRES_PASSWORD}'
        
        # Redis Configuration
        redis['enable'] = false
        gitlab_rails['redis_host'] = 'gitlab-redis'
        gitlab_rails['redis_port'] = 6379
        gitlab_rails['redis_database'] = 0
        
        # Performance Settings (Development)
        puma['worker_processes'] = 2
        puma['min_threads'] = 1
        puma['max_threads'] = 2
        sidekiq['max_concurrency'] = 5
        
        # Email Configuration (disabled by default)
        gitlab_rails['gitlab_email_enabled'] = ${EMAIL_ENABLED:-false}
        gitlab_rails['smtp_enable'] = ${SMTP_ENABLED:-false}
        
        # Backup Configuration
        gitlab_rails['backup_path'] = '/var/opt/gitlab/backups'
        gitlab_rails['backup_keep_time'] = 604800
        gitlab_rails['backup_archive_permissions'] = 0644
        
        # Security Settings
        gitlab_rails['rack_attack_git_basic_auth'] = {
          'enabled' => true,
          'ip_whitelist' => ["172.20.0.0/16", "127.0.0.1"],
          'maxretry' => 10,
          'findtime' => 60,
          'bantime' => 3600
        }
        
        # Nginx Settings
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['custom_gitlab_server_config'] = "
          add_header X-Frame-Options DENY;
          add_header X-Content-Type-Options nosniff;
          add_header X-XSS-Protection '1; mode=block';
          client_max_body_size 0;
        "
        
        # SSH Settings
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}
        
        # Registry (disabled by default)
        registry_external_url '${REGISTRY_EXTERNAL_URL}'
        gitlab_rails['registry_enabled'] = ${REGISTRY_ENABLED:-false}
        
        # Pages (disabled by default)
        gitlab_pages['enable'] = ${PAGES_ENABLED:-false}
        
        # Monitoring
        prometheus_monitoring['enable'] = true
        grafana['enable'] = ${GRAFANA_ENABLED:-false}
        
        # Logging
        logging['svlogd_size'] = 50 * 1024 * 1024
        logging['svlogd_num'] = 5
        
        # GitLab Runner registration token (if needed)
        gitlab_rails['initial_shared_runners_registration_token'] = '${RUNNER_REGISTRATION_TOKEN}'
        
    ports:
      - "${GITLAB_HTTP_PORT}:80"
      - "${GITLAB_HTTPS_PORT}:443"
      - "${GITLAB_SSH_PORT}:22"
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab
      - gitlab-backups:/var/opt/gitlab/backups
      - /etc/localtime:/etc/localtime:ro
    networks:
      gitlab-network:
        ipv4_address: 172.20.0.30
    depends_on:
      gitlab-postgresql:
        condition: service_healthy
      gitlab-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "gitlab-healthcheck --fail --max-time 10"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: ${GITLAB_MEMORY_LIMIT:-6G}
          cpus: '${GITLAB_CPU_LIMIT:-2.0}'
        reservations:
          memory: ${GITLAB_MEMORY_RESERVATION:-4G}
          cpus: '${GITLAB_CPU_RESERVATION:-1.0}'

  # GitLab Runner (Optional)
  gitlab-runner:
    image: gitlab/gitlab-runner:${RUNNER_VERSION:-latest}
    container_name: gitlab-runner
    restart: unless-stopped
    profiles:
      - runner
    volumes:
      - ./volumes/gitlab-runner/config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/runner-register.sh:/register.sh:ro
    networks:
      - gitlab-network
    depends_on:
      - gitlab
    environment:
      GITLAB_URL: ${GITLAB_EXTERNAL_URL}
      REGISTRATION_TOKEN: ${RUNNER_REGISTRATION_TOKEN}
      RUNNER_NAME: ${RUNNER_NAME:-docker-runner}
      RUNNER_EXECUTOR: ${RUNNER_EXECUTOR:-docker}
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy (Optional)
  nginx-proxy:
    image: nginx:alpine
    container_name: gitlab-nginx
    restart: unless-stopped
    profiles:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./volumes/nginx/logs:/var/log/nginx
    networks:
      - gitlab-network
    depends_on:
      - gitlab
    security_opt:
      - no-new-privileges:true
